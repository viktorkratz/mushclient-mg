<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Montag, September 25, 2023, 7:28  -->
<!-- MuClient version 5.01 -->

<!-- Plugin "mg_ways" generated by Plugin Wizard -->

<muclient>
   <plugin
      name="mg_ways"
      author="Viktor Kratz"
      id="b0cb6f7d8c7666e619d0bdd9"
      language="Lua"
      purpose="Save and walk ways."
      date_written="2023-09-25 19:27:51"
      requires="5.01"
      version="1.0"
   >
   </plugin>
   <aliases>
      <alias
         script="mstart"
         match="^mstart(.*)?$"
         regexp="y"
         enabled="y"
         sequence="100">
      </alias>
   </aliases>
   <script>
<![CDATA[
require "json"
require "sqlite3"
require "utils"

local mg_rooms_id="13292fe3403d8b28f77bf5ac"
local db_name="mg_ways.db"
local rooms={}
local lastStart=nil
function OnPluginInstall ()
local db=sqlite3.open(db_name)
db:exec([[
CREATE TABLE IF NOT EXISTS Routes(
   id,
   start_id,
   end_id
   );
   CREATE TABLE IF NOT EXISTS Ways(
      route_id,
      from_id,
      to_id,
      steps
      );
      CREATE TABLE IF NOT EXISTS Migrations(
id,
date
      );
      CREATE TABLE IF NOT EXISTS Rooms(
id,
short,
domain,
visibleExits
      );
]])
migrate(db)
db:close()
end -- OnPluginInstall

function migrate(db)
end -- function migrate

function isStartingRoom(roomId)
local db=sqlite3.open(db_name)
local stm=db:prepare("SELECT count(*) FROM Routes WHERE start_id=:room_id")
stm:bind_names({room_id=roomId})
local result=stm:step()
assert(result == sqlite3.ROW, "Fehler beim Abrufen der Tabelle routes")
local count=stm:get_value(0) 
stm:finalize()
db:close();

return count>0
end -- 

function getRoutesWithRoom(room_id)
local db=sqlite3.open(db_name)
local stm=db:prepare([[
SELECT rstart.short as start_short, rstart.id as start_id,
rend.short as end_short,  rend.id as end_id
FROM Ways w
INNER JOIN Routes
ON w.route_id=routes.id
INNER JOIN rooms rend
on rend.id=routes.end_id
INNER JOIN rooms rstart
ON rstart.id=routes.start_id
WHERE w.from_id=:room_id
]])
stm:bind_names({room_id=room_id})
local result=stm:step()
local destinationRooms={}
while result==sqlite3.ROW do
local row=stm:get_named_values()
destinationRooms.insert({destination={id=row.end_id,short=row.end_short},start={id=row.start_id,short=row.start_short}})
stm:step()
end -- while
stm:finalize()
db:close()
return destinationRooms
end -- getRoutesWithRoom

function mstart(name, line,wildcards)
if lastStart~=nil then
local replaceMsgResult=utils.msgbox("Es wird bereits eine Route aufgezeichnet. Soll trotzdem eine neue Route begonnen werden?",nil,"yesno")
if replaceMsgResult=="no" then
return
end -- if
end -- if
local currentRoom=getRoomInfo()
if(currentRoom==nil) then
return nil
end -- if

if isStartingRoom(currentRoom.id) then
lastStart=currentRoom
else
local possibleStarts=getRoutesWithRoom(currentRoom.id)
local lBoxEntries={new="Diesen Raum als Startpunkt nutzen."}
if #possibleStarts>0 then
lBoxEntries["go_start"]="Zu angebundenem Raum gehen und Route dort beginnen."
lBoxEntries["additional_route"]="Eine neue Route erstellen, welche die vorhandene Route über diesen Raum nutzt."
end -- if
local lBoxResult=utils.listbox("Dieser Raum ist noch nicht als Startraum angebunden. Wählen sie die passende Aktion aus.",nil,lBoxEntries,"new")
if lBoxResult=="new" then
lastStart=currentRoom
elseif lBoxResult=="go_start" then
elseif lBoxResult=="additional_route" then
end -- if
end -- if
end -- function mstart

function showPossibleGotosForMstart(routes)
end -- function

function getRoomInfo()
local roomJSON=GetPluginVariable(mg_rooms_id,"roomJSON")
if roomJSON == nil then
utils.msgbox("Der aktuelle Raum konnte nicht ermittelt werden. Evtl. wurde seit dem installieren von mg_rooms noch kein Raum gewechselt?","Fehler beim ermitteln des aktuellen Raums")
return Nil
end -- if for nil check
local room= json.decode(roomJSON)
if room.id=="" then
utils.msgbox("Dieser Raum kann nicht für Wege genutzt werden.")
return nil
end -- if
return room
end -- getRoomInfo
]]>
</script>


</muclient>